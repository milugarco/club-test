/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountResponse,
  AccountsResponse,
  CreateAccountDto,
  ResponseAccountDto,
  UpdateAccountDto,
} from '../models/index';
import {
    AccountResponseFromJSON,
    AccountResponseToJSON,
    AccountsResponseFromJSON,
    AccountsResponseToJSON,
    CreateAccountDtoFromJSON,
    CreateAccountDtoToJSON,
    ResponseAccountDtoFromJSON,
    ResponseAccountDtoToJSON,
    UpdateAccountDtoFromJSON,
    UpdateAccountDtoToJSON,
} from '../models/index';

export interface AccountControllerCreateRequest {
    createAccountDto: CreateAccountDto;
}

export interface AccountControllerFindAllRequest {
    name?: string;
    corporateName?: string;
    fantasyName?: string;
    document?: string;
    status?: AccountControllerFindAllStatusEnum;
    page?: number;
    perPage?: number;
}

export interface AccountControllerFindOneRequest {
    id: string;
}

export interface AccountControllerUpdateRequest {
    id: string;
    updateAccountDto: UpdateAccountDto;
}

export interface AccountControllerUploadPhotoRequest {
    id: string;
    file?: Blob;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Create a new account
     */
    async accountControllerCreateRaw(requestParameters: AccountControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAccountDto>> {
        if (requestParameters.createAccountDto === null || requestParameters.createAccountDto === undefined) {
            throw new runtime.RequiredError('createAccountDto','Required parameter requestParameters.createAccountDto was null or undefined when calling accountControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/v1/account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccountDtoToJSON(requestParameters.createAccountDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAccountDtoFromJSON(jsonValue));
    }

    /**
     * Create a new account
     */
    async accountControllerCreate(requestParameters: AccountControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAccountDto> {
        const response = await this.accountControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all accounts
     */
    async accountControllerFindAllRaw(requestParameters: AccountControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.corporateName !== undefined) {
            queryParameters['corporateName'] = requestParameters.corporateName;
        }

        if (requestParameters.fantasyName !== undefined) {
            queryParameters['fantasyName'] = requestParameters.fantasyName;
        }

        if (requestParameters.document !== undefined) {
            queryParameters['document'] = requestParameters.document;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/v1/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountsResponseFromJSON(jsonValue));
    }

    /**
     * Get all accounts
     */
    async accountControllerFindAll(requestParameters: AccountControllerFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsResponse> {
        const response = await this.accountControllerFindAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get account by ID
     */
    async accountControllerFindOneRaw(requestParameters: AccountControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/v1/account/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountResponseFromJSON(jsonValue));
    }

    /**
     * Get account by ID
     */
    async accountControllerFindOne(requestParameters: AccountControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountResponse> {
        const response = await this.accountControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an account
     */
    async accountControllerUpdateRaw(requestParameters: AccountControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountControllerUpdate.');
        }

        if (requestParameters.updateAccountDto === null || requestParameters.updateAccountDto === undefined) {
            throw new runtime.RequiredError('updateAccountDto','Required parameter requestParameters.updateAccountDto was null or undefined when calling accountControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/v1/account/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountDtoToJSON(requestParameters.updateAccountDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an account
     */
    async accountControllerUpdate(requestParameters: AccountControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     * Submit photo/avatar a account
     */
    async accountControllerUploadPhotoRaw(requestParameters: AccountControllerUploadPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountControllerUploadPhoto.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/account/v1/account/{id}/photo`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Submit photo/avatar a account
     */
    async accountControllerUploadPhoto(requestParameters: AccountControllerUploadPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountControllerUploadPhotoRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AccountControllerFindAllStatusEnum = {
    Enabled: 'ENABLED',
    Disabled: 'DISABLED',
    WaitingApproval: 'WAITING_APPROVAL'
} as const;
export type AccountControllerFindAllStatusEnum = typeof AccountControllerFindAllStatusEnum[keyof typeof AccountControllerFindAllStatusEnum];
