/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountUserResponse,
  AccountsUserResponse,
  CreateAccountUserDto,
  ResponseAccountUserDto,
  UpdateAccountUserDto,
} from '../models/index';
import {
    AccountUserResponseFromJSON,
    AccountUserResponseToJSON,
    AccountsUserResponseFromJSON,
    AccountsUserResponseToJSON,
    CreateAccountUserDtoFromJSON,
    CreateAccountUserDtoToJSON,
    ResponseAccountUserDtoFromJSON,
    ResponseAccountUserDtoToJSON,
    UpdateAccountUserDtoFromJSON,
    UpdateAccountUserDtoToJSON,
} from '../models/index';

export interface AccountUserControllerCreateRequest {
    createAccountUserDto: CreateAccountUserDto;
}

export interface AccountUserControllerFindAllRequest {
    accountId?: string;
    userId?: string;
    type?: AccountUserControllerFindAllTypeEnum;
    status?: AccountUserControllerFindAllStatusEnum;
    position?: string;
    page?: number;
    perPage?: number;
}

export interface AccountUserControllerFindOneRequest {
    id: string;
}

export interface AccountUserControllerRemoveRequest {
    id: string;
}

export interface AccountUserControllerUpdateRequest {
    id: string;
    updateAccountUserDto: UpdateAccountUserDto;
}

/**
 * 
 */
export class AccountUsersApi extends runtime.BaseAPI {

    /**
     * Create an account user
     */
    async accountUserControllerCreateRaw(requestParameters: AccountUserControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAccountUserDto>> {
        if (requestParameters.createAccountUserDto === null || requestParameters.createAccountUserDto === undefined) {
            throw new runtime.RequiredError('createAccountUserDto','Required parameter requestParameters.createAccountUserDto was null or undefined when calling accountUserControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/v1/account-user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccountUserDtoToJSON(requestParameters.createAccountUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAccountUserDtoFromJSON(jsonValue));
    }

    /**
     * Create an account user
     */
    async accountUserControllerCreate(requestParameters: AccountUserControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAccountUserDto> {
        const response = await this.accountUserControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ger an account user with filter
     */
    async accountUserControllerFindAllRaw(requestParameters: AccountUserControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsUserResponse>> {
        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.position !== undefined) {
            queryParameters['position'] = requestParameters.position;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/v1/account-user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountsUserResponseFromJSON(jsonValue));
    }

    /**
     * Ger an account user with filter
     */
    async accountUserControllerFindAll(requestParameters: AccountUserControllerFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsUserResponse> {
        const response = await this.accountUserControllerFindAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find an account user especific
     */
    async accountUserControllerFindOneRaw(requestParameters: AccountUserControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountUserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountUserControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/v1/account-user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountUserResponseFromJSON(jsonValue));
    }

    /**
     * Find an account user especific
     */
    async accountUserControllerFindOne(requestParameters: AccountUserControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountUserResponse> {
        const response = await this.accountUserControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an account user
     */
    async accountUserControllerRemoveRaw(requestParameters: AccountUserControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountUserControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/v1/account-user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an account user
     */
    async accountUserControllerRemove(requestParameters: AccountUserControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountUserControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Update an Account User
     */
    async accountUserControllerUpdateRaw(requestParameters: AccountUserControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountUserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountUserControllerUpdate.');
        }

        if (requestParameters.updateAccountUserDto === null || requestParameters.updateAccountUserDto === undefined) {
            throw new runtime.RequiredError('updateAccountUserDto','Required parameter requestParameters.updateAccountUserDto was null or undefined when calling accountUserControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/v1/account-user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountUserDtoToJSON(requestParameters.updateAccountUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountUserResponseFromJSON(jsonValue));
    }

    /**
     * Update an Account User
     */
    async accountUserControllerUpdate(requestParameters: AccountUserControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountUserResponse> {
        const response = await this.accountUserControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AccountUserControllerFindAllTypeEnum = {
    Team: 'TEAM',
    Student: 'STUDENT'
} as const;
export type AccountUserControllerFindAllTypeEnum = typeof AccountUserControllerFindAllTypeEnum[keyof typeof AccountUserControllerFindAllTypeEnum];
/**
 * @export
 */
export const AccountUserControllerFindAllStatusEnum = {
    Enabled: 'ENABLED',
    Disabled: 'DISABLED',
    WaitingApproval: 'WAITING_APPROVAL'
} as const;
export type AccountUserControllerFindAllStatusEnum = typeof AccountUserControllerFindAllStatusEnum[keyof typeof AccountUserControllerFindAllStatusEnum];
