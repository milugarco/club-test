/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressResponse,
  AddressesResponse,
  CreateAddressDto,
  DeleteAddressResponse,
  UpdateAddressDto,
} from '../models/index';
import {
    AddressResponseFromJSON,
    AddressResponseToJSON,
    AddressesResponseFromJSON,
    AddressesResponseToJSON,
    CreateAddressDtoFromJSON,
    CreateAddressDtoToJSON,
    DeleteAddressResponseFromJSON,
    DeleteAddressResponseToJSON,
    UpdateAddressDtoFromJSON,
    UpdateAddressDtoToJSON,
} from '../models/index';

export interface AddressControllerCreateRequest {
    createAddressDto: CreateAddressDto;
}

export interface AddressControllerFindAllRequest {
    userId: string;
    filter?: string;
    perPage?: any;
    page?: any;
}

export interface AddressControllerFindOneRequest {
    id: string;
}

export interface AddressControllerRemoveRequest {
    id: string;
}

export interface AddressControllerUpdateRequest {
    id: string;
    updateAddressDto: UpdateAddressDto;
}

/**
 * 
 */
export class AddressUserApi extends runtime.BaseAPI {

    /**
     * Create address for user
     */
    async addressControllerCreateRaw(requestParameters: AddressControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressResponse>> {
        if (requestParameters.createAddressDto === null || requestParameters.createAddressDto === undefined) {
            throw new runtime.RequiredError('createAddressDto','Required parameter requestParameters.createAddressDto was null or undefined when calling addressControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/address/v1/address`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAddressDtoToJSON(requestParameters.createAddressDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressResponseFromJSON(jsonValue));
    }

    /**
     * Create address for user
     */
    async addressControllerCreate(requestParameters: AddressControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressResponse> {
        const response = await this.addressControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get address the user with filter
     */
    async addressControllerFindAllRaw(requestParameters: AddressControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AddressesResponse>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addressControllerFindAll.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/address/v1/address`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AddressesResponseFromJSON));
    }

    /**
     * Get address the user with filter
     */
    async addressControllerFindAll(requestParameters: AddressControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AddressesResponse>> {
        const response = await this.addressControllerFindAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get address the user with ID
     */
    async addressControllerFindOneRaw(requestParameters: AddressControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addressControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/address/v1/address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressResponseFromJSON(jsonValue));
    }

    /**
     * Get address the user with ID
     */
    async addressControllerFindOne(requestParameters: AddressControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressResponse> {
        const response = await this.addressControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete address the user with ID
     */
    async addressControllerRemoveRaw(requestParameters: AddressControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteAddressResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addressControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/address/v1/address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteAddressResponseFromJSON(jsonValue));
    }

    /**
     * Delete address the user with ID
     */
    async addressControllerRemove(requestParameters: AddressControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteAddressResponse> {
        const response = await this.addressControllerRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update address the user with ID
     */
    async addressControllerUpdateRaw(requestParameters: AddressControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addressControllerUpdate.');
        }

        if (requestParameters.updateAddressDto === null || requestParameters.updateAddressDto === undefined) {
            throw new runtime.RequiredError('updateAddressDto','Required parameter requestParameters.updateAddressDto was null or undefined when calling addressControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/address/v1/address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAddressDtoToJSON(requestParameters.updateAddressDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressResponseFromJSON(jsonValue));
    }

    /**
     * Update address the user with ID
     */
    async addressControllerUpdate(requestParameters: AddressControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressResponse> {
        const response = await this.addressControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
