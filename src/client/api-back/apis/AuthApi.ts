/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginResponseDto,
  LoginUserDto,
  LoginWithAccountDto,
} from '../models/index';
import {
    LoginResponseDtoFromJSON,
    LoginResponseDtoToJSON,
    LoginUserDtoFromJSON,
    LoginUserDtoToJSON,
    LoginWithAccountDtoFromJSON,
    LoginWithAccountDtoToJSON,
} from '../models/index';

export interface AuthControllerLoginRequest {
    loginUserDto: LoginUserDto;
}

export interface AuthControllerLoginWithAccountRequest {
    loginWithAccountDto: LoginWithAccountDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Login
     */
    async authControllerLoginRaw(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponseDto>> {
        if (requestParameters.loginUserDto === null || requestParameters.loginUserDto === undefined) {
            throw new runtime.RequiredError('loginUserDto','Required parameter requestParameters.loginUserDto was null or undefined when calling authControllerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/v1/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginUserDtoToJSON(requestParameters.loginUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseDtoFromJSON(jsonValue));
    }

    /**
     * Login
     */
    async authControllerLogin(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponseDto> {
        const response = await this.authControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login with Account using JWT
     */
    async authControllerLoginWithAccountRaw(requestParameters: AuthControllerLoginWithAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.loginWithAccountDto === null || requestParameters.loginWithAccountDto === undefined) {
            throw new runtime.RequiredError('loginWithAccountDto','Required parameter requestParameters.loginWithAccountDto was null or undefined when calling authControllerLoginWithAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/v1/auth/login-with-account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginWithAccountDtoToJSON(requestParameters.loginWithAccountDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Login with Account using JWT
     */
    async authControllerLoginWithAccount(requestParameters: AuthControllerLoginWithAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerLoginWithAccountRaw(requestParameters, initOverrides);
    }

}
