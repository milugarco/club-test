/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResponseDocumentAndTermDto,
  UpdateDocumentAndTermDto,
} from '../models/index';
import {
    ResponseDocumentAndTermDtoFromJSON,
    ResponseDocumentAndTermDtoToJSON,
    UpdateDocumentAndTermDtoFromJSON,
    UpdateDocumentAndTermDtoToJSON,
} from '../models/index';

export interface DocumentAndTermControllerCreateRequest {
    name: string;
    file: Blob;
    deadlineAt: Date;
    autoClose: boolean;
    locale: string;
    sequenceEnabled: boolean;
    remindInterval: string;
    blockAfterRefusal: boolean;
}

export interface DocumentAndTermControllerFindAllRequest {
    id?: string;
    startDate?: string;
    endDate?: string;
    page?: number;
    perPage?: string;
}

export interface DocumentAndTermControllerRemoveRequest {
    id: string;
}

export interface DocumentAndTermControllerUpdateRequest {
    id: string;
    updateDocumentAndTermDto: UpdateDocumentAndTermDto;
}

/**
 * 
 */
export class DocumentAndTermApi extends runtime.BaseAPI {

    /**
     * Create an document and terms
     */
    async documentAndTermControllerCreateRaw(requestParameters: DocumentAndTermControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDocumentAndTermDto>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling documentAndTermControllerCreate.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling documentAndTermControllerCreate.');
        }

        if (requestParameters.deadlineAt === null || requestParameters.deadlineAt === undefined) {
            throw new runtime.RequiredError('deadlineAt','Required parameter requestParameters.deadlineAt was null or undefined when calling documentAndTermControllerCreate.');
        }

        if (requestParameters.autoClose === null || requestParameters.autoClose === undefined) {
            throw new runtime.RequiredError('autoClose','Required parameter requestParameters.autoClose was null or undefined when calling documentAndTermControllerCreate.');
        }

        if (requestParameters.locale === null || requestParameters.locale === undefined) {
            throw new runtime.RequiredError('locale','Required parameter requestParameters.locale was null or undefined when calling documentAndTermControllerCreate.');
        }

        if (requestParameters.sequenceEnabled === null || requestParameters.sequenceEnabled === undefined) {
            throw new runtime.RequiredError('sequenceEnabled','Required parameter requestParameters.sequenceEnabled was null or undefined when calling documentAndTermControllerCreate.');
        }

        if (requestParameters.remindInterval === null || requestParameters.remindInterval === undefined) {
            throw new runtime.RequiredError('remindInterval','Required parameter requestParameters.remindInterval was null or undefined when calling documentAndTermControllerCreate.');
        }

        if (requestParameters.blockAfterRefusal === null || requestParameters.blockAfterRefusal === undefined) {
            throw new runtime.RequiredError('blockAfterRefusal','Required parameter requestParameters.blockAfterRefusal was null or undefined when calling documentAndTermControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.deadlineAt !== undefined) {
            formParams.append('deadlineAt', requestParameters.deadlineAt as any);
        }

        if (requestParameters.autoClose !== undefined) {
            formParams.append('autoClose', requestParameters.autoClose as any);
        }

        if (requestParameters.locale !== undefined) {
            formParams.append('locale', requestParameters.locale as any);
        }

        if (requestParameters.sequenceEnabled !== undefined) {
            formParams.append('sequenceEnabled', requestParameters.sequenceEnabled as any);
        }

        if (requestParameters.remindInterval !== undefined) {
            formParams.append('remindInterval', requestParameters.remindInterval as any);
        }

        if (requestParameters.blockAfterRefusal !== undefined) {
            formParams.append('blockAfterRefusal', requestParameters.blockAfterRefusal as any);
        }

        const response = await this.request({
            path: `/document-and-term/v1/document`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDocumentAndTermDtoFromJSON(jsonValue));
    }

    /**
     * Create an document and terms
     */
    async documentAndTermControllerCreate(requestParameters: DocumentAndTermControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDocumentAndTermDto> {
        const response = await this.documentAndTermControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get with filter an document and terms
     */
    async documentAndTermControllerFindAllRaw(requestParameters: DocumentAndTermControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/document-and-term/v1/document`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get with filter an document and terms
     */
    async documentAndTermControllerFindAll(requestParameters: DocumentAndTermControllerFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentAndTermControllerFindAllRaw(requestParameters, initOverrides);
    }

    /**
     */
    async documentAndTermControllerRemoveRaw(requestParameters: DocumentAndTermControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling documentAndTermControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/document-and-term/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async documentAndTermControllerRemove(requestParameters: DocumentAndTermControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentAndTermControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async documentAndTermControllerUpdateRaw(requestParameters: DocumentAndTermControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling documentAndTermControllerUpdate.');
        }

        if (requestParameters.updateDocumentAndTermDto === null || requestParameters.updateDocumentAndTermDto === undefined) {
            throw new runtime.RequiredError('updateDocumentAndTermDto','Required parameter requestParameters.updateDocumentAndTermDto was null or undefined when calling documentAndTermControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/document-and-term/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDocumentAndTermDtoToJSON(requestParameters.updateDocumentAndTermDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async documentAndTermControllerUpdate(requestParameters: DocumentAndTermControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentAndTermControllerUpdateRaw(requestParameters, initOverrides);
    }

}
