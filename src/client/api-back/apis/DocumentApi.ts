/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDocumentDto,
  DocumentResponse,
  DocumentsResponse,
  ResponseDocumentDto,
  UpdateDocumentDto,
} from '../models/index';
import {
    CreateDocumentDtoFromJSON,
    CreateDocumentDtoToJSON,
    DocumentResponseFromJSON,
    DocumentResponseToJSON,
    DocumentsResponseFromJSON,
    DocumentsResponseToJSON,
    ResponseDocumentDtoFromJSON,
    ResponseDocumentDtoToJSON,
    UpdateDocumentDtoFromJSON,
    UpdateDocumentDtoToJSON,
} from '../models/index';

export interface DocumentControllerCreateRequest {
    userId: string;
    createDocumentDto: CreateDocumentDto;
}

export interface DocumentControllerFindAllRequest {
    filter: string;
    perPage?: number;
    page?: number;
}

export interface DocumentControllerFindOneRequest {
    id: string;
}

export interface DocumentControllerRemoveRequest {
    id: string;
}

export interface DocumentControllerUpdateRequest {
    id: string;
    updateDocumentDto: UpdateDocumentDto;
}

/**
 * 
 */
export class DocumentApi extends runtime.BaseAPI {

    /**
     * Create an document for user
     */
    async documentControllerCreateRaw(requestParameters: DocumentControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDocumentDto>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling documentControllerCreate.');
        }

        if (requestParameters.createDocumentDto === null || requestParameters.createDocumentDto === undefined) {
            throw new runtime.RequiredError('createDocumentDto','Required parameter requestParameters.createDocumentDto was null or undefined when calling documentControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/document/v1/document/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDocumentDtoToJSON(requestParameters.createDocumentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDocumentDtoFromJSON(jsonValue));
    }

    /**
     * Create an document for user
     */
    async documentControllerCreate(requestParameters: DocumentControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDocumentDto> {
        const response = await this.documentControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get documents with filter
     */
    async documentControllerFindAllRaw(requestParameters: DocumentControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsResponse>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling documentControllerFindAll.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/document/v1/document`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsResponseFromJSON(jsonValue));
    }

    /**
     * Get documents with filter
     */
    async documentControllerFindAll(requestParameters: DocumentControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsResponse> {
        const response = await this.documentControllerFindAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a document by ID
     */
    async documentControllerFindOneRaw(requestParameters: DocumentControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling documentControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/document/v1/document/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentResponseFromJSON(jsonValue));
    }

    /**
     * Get a document by ID
     */
    async documentControllerFindOne(requestParameters: DocumentControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentResponse> {
        const response = await this.documentControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a document by ID
     */
    async documentControllerRemoveRaw(requestParameters: DocumentControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling documentControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/document/v1/document/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a document by ID
     */
    async documentControllerRemove(requestParameters: DocumentControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Update a document by ID
     */
    async documentControllerUpdateRaw(requestParameters: DocumentControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling documentControllerUpdate.');
        }

        if (requestParameters.updateDocumentDto === null || requestParameters.updateDocumentDto === undefined) {
            throw new runtime.RequiredError('updateDocumentDto','Required parameter requestParameters.updateDocumentDto was null or undefined when calling documentControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/document/v1/document/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDocumentDtoToJSON(requestParameters.updateDocumentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentResponseFromJSON(jsonValue));
    }

    /**
     * Update a document by ID
     */
    async documentControllerUpdate(requestParameters: DocumentControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentResponse> {
        const response = await this.documentControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
