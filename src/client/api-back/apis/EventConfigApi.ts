/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventConfigResponse,
  UpdateEventConfigDto,
} from '../models/index';
import {
    EventConfigResponseFromJSON,
    EventConfigResponseToJSON,
    UpdateEventConfigDtoFromJSON,
    UpdateEventConfigDtoToJSON,
} from '../models/index';

export interface EventConfigControllerFindRequest {
    eventId: string;
}

export interface EventConfigControllerUpdateRequest {
    eventId: string;
    id: string;
    updateEventConfigDto: UpdateEventConfigDto;
}

/**
 * 
 */
export class EventConfigApi extends runtime.BaseAPI {

    /**
     * Get a event configuration
     */
    async eventConfigControllerFindRaw(requestParameters: EventConfigControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventConfigResponse>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling eventConfigControllerFind.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-config/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventConfigResponseFromJSON(jsonValue));
    }

    /**
     * Get a event configuration
     */
    async eventConfigControllerFind(requestParameters: EventConfigControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventConfigResponse> {
        const response = await this.eventConfigControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find an participant especific
     */
    async eventConfigControllerUpdateRaw(requestParameters: EventConfigControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventConfigResponse>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling eventConfigControllerUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventConfigControllerUpdate.');
        }

        if (requestParameters.updateEventConfigDto === null || requestParameters.updateEventConfigDto === undefined) {
            throw new runtime.RequiredError('updateEventConfigDto','Required parameter requestParameters.updateEventConfigDto was null or undefined when calling eventConfigControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-config/{eventId}/{id}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEventConfigDtoToJSON(requestParameters.updateEventConfigDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventConfigResponseFromJSON(jsonValue));
    }

    /**
     * Find an participant especific
     */
    async eventConfigControllerUpdate(requestParameters: EventConfigControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventConfigResponse> {
        const response = await this.eventConfigControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
