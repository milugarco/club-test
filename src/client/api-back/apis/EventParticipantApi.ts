/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEventParticipantDto,
  EventParticipantResponse,
  EventsParticipantsResponse,
  ResponseAllEventParticipantsDto,
  ResponseEventParticipantDto,
  UpdateEventParticipantDto,
} from '../models/index';
import {
    CreateEventParticipantDtoFromJSON,
    CreateEventParticipantDtoToJSON,
    EventParticipantResponseFromJSON,
    EventParticipantResponseToJSON,
    EventsParticipantsResponseFromJSON,
    EventsParticipantsResponseToJSON,
    ResponseAllEventParticipantsDtoFromJSON,
    ResponseAllEventParticipantsDtoToJSON,
    ResponseEventParticipantDtoFromJSON,
    ResponseEventParticipantDtoToJSON,
    UpdateEventParticipantDtoFromJSON,
    UpdateEventParticipantDtoToJSON,
} from '../models/index';

export interface EventParticipanteControllerCreateRequest {
    eventTicketGuestId: string;
    createEventParticipantDto: CreateEventParticipantDto;
}

export interface EventParticipanteControllerFindAllRequest {
    eventId: string;
    userIds?: Array<any>;
    name?: string;
    email?: string;
    document?: string;
    sequential?: number;
    qrCode?: string;
    ticketsIds?: Array<any>;
    status?: Array<any>;
    perPage?: any;
    page?: any;
}

export interface EventParticipanteControllerFindAllParticipantsRequest {
    eventIds: Array<any>;
    perPage?: any;
    page?: any;
}

export interface EventParticipanteControllerFindOneRequest {
    eventId: string;
    id: string;
}

export interface EventParticipanteControllerFindParticipantRequest {
    id: string;
}

export interface EventParticipanteControllerUpdateRequest {
    eventId: string;
    id: string;
    updateEventParticipantDto: UpdateEventParticipantDto;
}

export interface EventParticipanteControllerUpdateIsSynchronizedRequest {
    ids: Array<any>;
}

export interface EventParticipanteControllerUploadPhotoRequest {
    id: string;
    photo: Blob;
}

/**
 * 
 */
export class EventParticipantApi extends runtime.BaseAPI {

    /**
     * Create an participant
     */
    async eventParticipanteControllerCreateRaw(requestParameters: EventParticipanteControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseEventParticipantDto>> {
        if (requestParameters.eventTicketGuestId === null || requestParameters.eventTicketGuestId === undefined) {
            throw new runtime.RequiredError('eventTicketGuestId','Required parameter requestParameters.eventTicketGuestId was null or undefined when calling eventParticipanteControllerCreate.');
        }

        if (requestParameters.createEventParticipantDto === null || requestParameters.createEventParticipantDto === undefined) {
            throw new runtime.RequiredError('createEventParticipantDto','Required parameter requestParameters.createEventParticipantDto was null or undefined when calling eventParticipanteControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-participant/{eventTicketGuestId}`.replace(`{${"eventTicketGuestId"}}`, encodeURIComponent(String(requestParameters.eventTicketGuestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventParticipantDtoToJSON(requestParameters.createEventParticipantDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEventParticipantDtoFromJSON(jsonValue));
    }

    /**
     * Create an participant
     */
    async eventParticipanteControllerCreate(requestParameters: EventParticipanteControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseEventParticipantDto> {
        const response = await this.eventParticipanteControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an participants with filter
     */
    async eventParticipanteControllerFindAllRaw(requestParameters: EventParticipanteControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsParticipantsResponse>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling eventParticipanteControllerFindAll.');
        }

        const queryParameters: any = {};

        if (requestParameters.userIds) {
            queryParameters['userIds'] = requestParameters.userIds;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.document !== undefined) {
            queryParameters['document'] = requestParameters.document;
        }

        if (requestParameters.sequential !== undefined) {
            queryParameters['sequential'] = requestParameters.sequential;
        }

        if (requestParameters.qrCode !== undefined) {
            queryParameters['qrCode'] = requestParameters.qrCode;
        }

        if (requestParameters.ticketsIds) {
            queryParameters['ticketsIds'] = requestParameters.ticketsIds;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-participant/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsParticipantsResponseFromJSON(jsonValue));
    }

    /**
     * Get an participants with filter
     */
    async eventParticipanteControllerFindAll(requestParameters: EventParticipanteControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsParticipantsResponse> {
        const response = await this.eventParticipanteControllerFindAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find an participant especific
     */
    async eventParticipanteControllerFindAllParticipantsRaw(requestParameters: EventParticipanteControllerFindAllParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResponseAllEventParticipantsDto>>> {
        if (requestParameters.eventIds === null || requestParameters.eventIds === undefined) {
            throw new runtime.RequiredError('eventIds','Required parameter requestParameters.eventIds was null or undefined when calling eventParticipanteControllerFindAllParticipants.');
        }

        const queryParameters: any = {};

        if (requestParameters.eventIds) {
            queryParameters['eventIds'] = requestParameters.eventIds;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event/v1/event-participant/invicta-client/find-all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseAllEventParticipantsDtoFromJSON));
    }

    /**
     * Find an participant especific
     */
    async eventParticipanteControllerFindAllParticipants(requestParameters: EventParticipanteControllerFindAllParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResponseAllEventParticipantsDto>> {
        const response = await this.eventParticipanteControllerFindAllParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find an participant especific
     */
    async eventParticipanteControllerFindOneRaw(requestParameters: EventParticipanteControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventParticipantResponse>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling eventParticipanteControllerFindOne.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventParticipanteControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-participant/{eventId}/{id}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventParticipantResponseFromJSON(jsonValue));
    }

    /**
     * Find an participant especific
     */
    async eventParticipanteControllerFindOne(requestParameters: EventParticipanteControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventParticipantResponse> {
        const response = await this.eventParticipanteControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find an participant especific
     */
    async eventParticipanteControllerFindParticipantRaw(requestParameters: EventParticipanteControllerFindParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventParticipantResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventParticipanteControllerFindParticipant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event/v1/event-participant/invicta-client/find-unique/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventParticipantResponseFromJSON(jsonValue));
    }

    /**
     * Find an participant especific
     */
    async eventParticipanteControllerFindParticipant(requestParameters: EventParticipanteControllerFindParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventParticipantResponse> {
        const response = await this.eventParticipanteControllerFindParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find an participant especific
     */
    async eventParticipanteControllerUpdateRaw(requestParameters: EventParticipanteControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventParticipantResponse>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling eventParticipanteControllerUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventParticipanteControllerUpdate.');
        }

        if (requestParameters.updateEventParticipantDto === null || requestParameters.updateEventParticipantDto === undefined) {
            throw new runtime.RequiredError('updateEventParticipantDto','Required parameter requestParameters.updateEventParticipantDto was null or undefined when calling eventParticipanteControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-participant/{eventId}/{id}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEventParticipantDtoToJSON(requestParameters.updateEventParticipantDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventParticipantResponseFromJSON(jsonValue));
    }

    /**
     * Find an participant especific
     */
    async eventParticipanteControllerUpdate(requestParameters: EventParticipanteControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventParticipantResponse> {
        const response = await this.eventParticipanteControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Print is update to true
     */
    async eventParticipanteControllerUpdateIsSynchronizedRaw(requestParameters: EventParticipanteControllerUpdateIsSynchronizedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EventParticipantResponse>>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling eventParticipanteControllerUpdateIsSynchronized.');
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event/v1/event-participant/is-synchronized`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventParticipantResponseFromJSON));
    }

    /**
     * Print is update to true
     */
    async eventParticipanteControllerUpdateIsSynchronized(requestParameters: EventParticipanteControllerUpdateIsSynchronizedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EventParticipantResponse>> {
        const response = await this.eventParticipanteControllerUpdateIsSynchronizedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit photo/avatar for a event participant
     */
    async eventParticipanteControllerUploadPhotoRaw(requestParameters: EventParticipanteControllerUploadPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventParticipantResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventParticipanteControllerUploadPhoto.');
        }

        if (requestParameters.photo === null || requestParameters.photo === undefined) {
            throw new runtime.RequiredError('photo','Required parameter requestParameters.photo was null or undefined when calling eventParticipanteControllerUploadPhoto.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.photo !== undefined) {
            formParams.append('photo', requestParameters.photo as any);
        }

        const response = await this.request({
            path: `/event/v1/event-participant/{id}/photo`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventParticipantResponseFromJSON(jsonValue));
    }

    /**
     * Submit photo/avatar for a event participant
     */
    async eventParticipanteControllerUploadPhoto(requestParameters: EventParticipanteControllerUploadPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventParticipantResponse> {
        const response = await this.eventParticipanteControllerUploadPhotoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
