/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEventParticipantStatusDto,
  ResponseEventParticipantStatusDto,
  UpdateEventParticipantStatusDto,
} from '../models/index';
import {
    CreateEventParticipantStatusDtoFromJSON,
    CreateEventParticipantStatusDtoToJSON,
    ResponseEventParticipantStatusDtoFromJSON,
    ResponseEventParticipantStatusDtoToJSON,
    UpdateEventParticipantStatusDtoFromJSON,
    UpdateEventParticipantStatusDtoToJSON,
} from '../models/index';

export interface EventParticipantStatusControllerCreateRequest {
    createEventParticipantStatusDto: CreateEventParticipantStatusDto;
}

export interface EventParticipantStatusControllerFindOneRequest {
    id: string;
    eventParticipantId: string;
}

export interface EventParticipantStatusControllerUpdateRequest {
    id: string;
    eventParticipantId: string;
    updateEventParticipantStatusDto: UpdateEventParticipantStatusDto;
}

/**
 * 
 */
export class EventParticipantStatusApi extends runtime.BaseAPI {

    /**
     * Create an event participant status
     */
    async eventParticipantStatusControllerCreateRaw(requestParameters: EventParticipantStatusControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEventParticipantStatusDto>> {
        if (requestParameters.createEventParticipantStatusDto === null || requestParameters.createEventParticipantStatusDto === undefined) {
            throw new runtime.RequiredError('createEventParticipantStatusDto','Required parameter requestParameters.createEventParticipantStatusDto was null or undefined when calling eventParticipantStatusControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/event/v1/event-participant-status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventParticipantStatusDtoToJSON(requestParameters.createEventParticipantStatusDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEventParticipantStatusDtoFromJSON(jsonValue));
    }

    /**
     * Create an event participant status
     */
    async eventParticipantStatusControllerCreate(requestParameters: EventParticipantStatusControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEventParticipantStatusDto> {
        const response = await this.eventParticipantStatusControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find all event participant status
     */
    async eventParticipantStatusControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResponseEventParticipantStatusDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event/v1/event-participant-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseEventParticipantStatusDtoFromJSON));
    }

    /**
     * Find all event participant status
     */
    async eventParticipantStatusControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResponseEventParticipantStatusDto>> {
        const response = await this.eventParticipantStatusControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Find one event participant status
     */
    async eventParticipantStatusControllerFindOneRaw(requestParameters: EventParticipantStatusControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseEventParticipantStatusDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventParticipantStatusControllerFindOne.');
        }

        if (requestParameters.eventParticipantId === null || requestParameters.eventParticipantId === undefined) {
            throw new runtime.RequiredError('eventParticipantId','Required parameter requestParameters.eventParticipantId was null or undefined when calling eventParticipantStatusControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event/v1/event-participant-status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"eventParticipantId"}}`, encodeURIComponent(String(requestParameters.eventParticipantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEventParticipantStatusDtoFromJSON(jsonValue));
    }

    /**
     * Find one event participant status
     */
    async eventParticipantStatusControllerFindOne(requestParameters: EventParticipantStatusControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseEventParticipantStatusDto> {
        const response = await this.eventParticipantStatusControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an event participant status
     */
    async eventParticipantStatusControllerUpdateRaw(requestParameters: EventParticipantStatusControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateEventParticipantStatusDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventParticipantStatusControllerUpdate.');
        }

        if (requestParameters.eventParticipantId === null || requestParameters.eventParticipantId === undefined) {
            throw new runtime.RequiredError('eventParticipantId','Required parameter requestParameters.eventParticipantId was null or undefined when calling eventParticipantStatusControllerUpdate.');
        }

        if (requestParameters.updateEventParticipantStatusDto === null || requestParameters.updateEventParticipantStatusDto === undefined) {
            throw new runtime.RequiredError('updateEventParticipantStatusDto','Required parameter requestParameters.updateEventParticipantStatusDto was null or undefined when calling eventParticipantStatusControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/event/v1/event-participant-status/{id}/{eventParticipantId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"eventParticipantId"}}`, encodeURIComponent(String(requestParameters.eventParticipantId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEventParticipantStatusDtoToJSON(requestParameters.updateEventParticipantStatusDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateEventParticipantStatusDtoFromJSON(jsonValue));
    }

    /**
     * Update an event participant status
     */
    async eventParticipantStatusControllerUpdate(requestParameters: EventParticipantStatusControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateEventParticipantStatusDto> {
        const response = await this.eventParticipantStatusControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
