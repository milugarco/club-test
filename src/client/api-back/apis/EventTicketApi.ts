/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEventTicketDto,
  EventTicketResponse,
  EventsTicketsResponse,
  ResponseEventTicketDto,
  UpdateEventTicketDto,
} from '../models/index';
import {
    CreateEventTicketDtoFromJSON,
    CreateEventTicketDtoToJSON,
    EventTicketResponseFromJSON,
    EventTicketResponseToJSON,
    EventsTicketsResponseFromJSON,
    EventsTicketsResponseToJSON,
    ResponseEventTicketDtoFromJSON,
    ResponseEventTicketDtoToJSON,
    UpdateEventTicketDtoFromJSON,
    UpdateEventTicketDtoToJSON,
} from '../models/index';

export interface EventTicketControllerCreateRequest {
    createEventTicketDto: CreateEventTicketDto;
}

export interface EventTicketControllerFindAllRequest {
    eventId?: string;
    status?: EventTicketControllerFindAllStatusEnum;
    guest?: number;
    name?: string;
    perPage?: any;
    page?: any;
}

export interface EventTicketControllerFindOneRequest {
    id: string;
}

export interface EventTicketControllerUpdateRequest {
    id: string;
    updateEventTicketDto: UpdateEventTicketDto;
}

/**
 * 
 */
export class EventTicketApi extends runtime.BaseAPI {

    /**
     * Create an ticket
     */
    async eventTicketControllerCreateRaw(requestParameters: EventTicketControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseEventTicketDto>> {
        if (requestParameters.createEventTicketDto === null || requestParameters.createEventTicketDto === undefined) {
            throw new runtime.RequiredError('createEventTicketDto','Required parameter requestParameters.createEventTicketDto was null or undefined when calling eventTicketControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-ticket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventTicketDtoToJSON(requestParameters.createEventTicketDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEventTicketDtoFromJSON(jsonValue));
    }

    /**
     * Create an ticket
     */
    async eventTicketControllerCreate(requestParameters: EventTicketControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseEventTicketDto> {
        const response = await this.eventTicketControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an tickets with filter
     */
    async eventTicketControllerFindAllRaw(requestParameters: EventTicketControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsTicketsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.eventId !== undefined) {
            queryParameters['eventId'] = requestParameters.eventId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.guest !== undefined) {
            queryParameters['guest'] = requestParameters.guest;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-ticket`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsTicketsResponseFromJSON(jsonValue));
    }

    /**
     * Get an tickets with filter
     */
    async eventTicketControllerFindAll(requestParameters: EventTicketControllerFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsTicketsResponse> {
        const response = await this.eventTicketControllerFindAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find an event especific
     */
    async eventTicketControllerFindOneRaw(requestParameters: EventTicketControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventTicketResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventTicketControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-ticket/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventTicketResponseFromJSON(jsonValue));
    }

    /**
     * Find an event especific
     */
    async eventTicketControllerFindOne(requestParameters: EventTicketControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventTicketResponse> {
        const response = await this.eventTicketControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an event by ID
     */
    async eventTicketControllerUpdateRaw(requestParameters: EventTicketControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseEventTicketDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventTicketControllerUpdate.');
        }

        if (requestParameters.updateEventTicketDto === null || requestParameters.updateEventTicketDto === undefined) {
            throw new runtime.RequiredError('updateEventTicketDto','Required parameter requestParameters.updateEventTicketDto was null or undefined when calling eventTicketControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-ticket/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEventTicketDtoToJSON(requestParameters.updateEventTicketDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEventTicketDtoFromJSON(jsonValue));
    }

    /**
     * Update an event by ID
     */
    async eventTicketControllerUpdate(requestParameters: EventTicketControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseEventTicketDto> {
        const response = await this.eventTicketControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const EventTicketControllerFindAllStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE'
} as const;
export type EventTicketControllerFindAllStatusEnum = typeof EventTicketControllerFindAllStatusEnum[keyof typeof EventTicketControllerFindAllStatusEnum];
