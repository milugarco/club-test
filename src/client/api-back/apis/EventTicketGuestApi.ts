/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEventTicketGuestDto,
  EventTicketGuestResponse,
} from '../models/index';
import {
    CreateEventTicketGuestDtoFromJSON,
    CreateEventTicketGuestDtoToJSON,
    EventTicketGuestResponseFromJSON,
    EventTicketGuestResponseToJSON,
} from '../models/index';

export interface EventTicketGuestControllerCreateRequest {
    eventId: string;
    eventTicketId: string;
    createEventTicketGuestDto: CreateEventTicketGuestDto;
}

export interface EventTicketGuestControllerExportFileRequest {
    eventId: string;
    eventTicketStatus?: Array<string>;
}

export interface EventTicketGuestControllerFindAllRequest {
    eventId?: Array<string>;
    eventTicketId?: Array<string>;
}

export interface EventTicketGuestControllerFindOneRequest {
    id: string;
}

/**
 * 
 */
export class EventTicketGuestApi extends runtime.BaseAPI {

    /**
     * Create event ticket links
     */
    async eventTicketGuestControllerCreateRaw(requestParameters: EventTicketGuestControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling eventTicketGuestControllerCreate.');
        }

        if (requestParameters.eventTicketId === null || requestParameters.eventTicketId === undefined) {
            throw new runtime.RequiredError('eventTicketId','Required parameter requestParameters.eventTicketId was null or undefined when calling eventTicketGuestControllerCreate.');
        }

        if (requestParameters.createEventTicketGuestDto === null || requestParameters.createEventTicketGuestDto === undefined) {
            throw new runtime.RequiredError('createEventTicketGuestDto','Required parameter requestParameters.createEventTicketGuestDto was null or undefined when calling eventTicketGuestControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-ticket-guest/{eventId}/{eventTicketId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"eventTicketId"}}`, encodeURIComponent(String(requestParameters.eventTicketId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventTicketGuestDtoToJSON(requestParameters.createEventTicketGuestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create event ticket links
     */
    async eventTicketGuestControllerCreate(requestParameters: EventTicketGuestControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eventTicketGuestControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Export an tickets
     */
    async eventTicketGuestControllerExportFileRaw(requestParameters: EventTicketGuestControllerExportFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling eventTicketGuestControllerExportFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.eventTicketStatus) {
            queryParameters['eventTicketStatus'] = requestParameters.eventTicketStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/export-event-ticket-guest/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export an tickets
     */
    async eventTicketGuestControllerExportFile(requestParameters: EventTicketGuestControllerExportFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eventTicketGuestControllerExportFileRaw(requestParameters, initOverrides);
    }

    /**
     * Get an participants with filter
     */
    async eventTicketGuestControllerFindAllRaw(requestParameters: EventTicketGuestControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.eventId) {
            queryParameters['eventId'] = requestParameters.eventId;
        }

        if (requestParameters.eventTicketId) {
            queryParameters['eventTicketId'] = requestParameters.eventTicketId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-ticket-guest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get an participants with filter
     */
    async eventTicketGuestControllerFindAll(requestParameters: EventTicketGuestControllerFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eventTicketGuestControllerFindAllRaw(requestParameters, initOverrides);
    }

    /**
     * Find an event guest especific
     */
    async eventTicketGuestControllerFindOneRaw(requestParameters: EventTicketGuestControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventTicketGuestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventTicketGuestControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/v1/event-ticket-guest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventTicketGuestResponseFromJSON(jsonValue));
    }

    /**
     * Find an event guest especific
     */
    async eventTicketGuestControllerFindOne(requestParameters: EventTicketGuestControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventTicketGuestResponse> {
        const response = await this.eventTicketGuestControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
