/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangePasswordOtpDto,
  CreateOtpDto,
  LoginResponseDto,
  ResponseOTPHashDTO,
  ValidateOtpDto,
} from '../models/index';
import {
    ChangePasswordOtpDtoFromJSON,
    ChangePasswordOtpDtoToJSON,
    CreateOtpDtoFromJSON,
    CreateOtpDtoToJSON,
    LoginResponseDtoFromJSON,
    LoginResponseDtoToJSON,
    ResponseOTPHashDTOFromJSON,
    ResponseOTPHashDTOToJSON,
    ValidateOtpDtoFromJSON,
    ValidateOtpDtoToJSON,
} from '../models/index';

export interface OTPControllerChangePasswordRequest {
    changePasswordOtpDto: ChangePasswordOtpDto;
}

export interface OTPControllerCreateRequest {
    createOtpDto: CreateOtpDto;
}

export interface OTPControllerValidateOTPRequest {
    validateOtpDto: ValidateOtpDto;
}

/**
 * 
 */
export class OTPApi extends runtime.BaseAPI {

    /**
     * Change Password
     */
    async oTPControllerChangePasswordRaw(requestParameters: OTPControllerChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponseDto>> {
        if (requestParameters.changePasswordOtpDto === null || requestParameters.changePasswordOtpDto === undefined) {
            throw new runtime.RequiredError('changePasswordOtpDto','Required parameter requestParameters.changePasswordOtpDto was null or undefined when calling oTPControllerChangePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/otp/v1/otp/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordOtpDtoToJSON(requestParameters.changePasswordOtpDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseDtoFromJSON(jsonValue));
    }

    /**
     * Change Password
     */
    async oTPControllerChangePassword(requestParameters: OTPControllerChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponseDto> {
        const response = await this.oTPControllerChangePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate OTP code
     */
    async oTPControllerCreateRaw(requestParameters: OTPControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseOTPHashDTO>> {
        if (requestParameters.createOtpDto === null || requestParameters.createOtpDto === undefined) {
            throw new runtime.RequiredError('createOtpDto','Required parameter requestParameters.createOtpDto was null or undefined when calling oTPControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/otp/v1/otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOtpDtoToJSON(requestParameters.createOtpDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseOTPHashDTOFromJSON(jsonValue));
    }

    /**
     * Generate OTP code
     */
    async oTPControllerCreate(requestParameters: OTPControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseOTPHashDTO> {
        const response = await this.oTPControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate OTP code
     */
    async oTPControllerValidateOTPRaw(requestParameters: OTPControllerValidateOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseOTPHashDTO>> {
        if (requestParameters.validateOtpDto === null || requestParameters.validateOtpDto === undefined) {
            throw new runtime.RequiredError('validateOtpDto','Required parameter requestParameters.validateOtpDto was null or undefined when calling oTPControllerValidateOTP.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/otp/v1/otp/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateOtpDtoToJSON(requestParameters.validateOtpDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseOTPHashDTOFromJSON(jsonValue));
    }

    /**
     * Generate OTP code
     */
    async oTPControllerValidateOTP(requestParameters: OTPControllerValidateOTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseOTPHashDTO> {
        const response = await this.oTPControllerValidateOTPRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
