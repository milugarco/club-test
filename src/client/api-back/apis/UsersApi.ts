/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserDto,
  DeleteUserResponse,
  ResponseUserDto,
  UpdateUserDto,
  UserResponse,
  UsersResponse,
} from '../models/index';
import {
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    DeleteUserResponseFromJSON,
    DeleteUserResponseToJSON,
    ResponseUserDtoFromJSON,
    ResponseUserDtoToJSON,
    UpdateUserDtoFromJSON,
    UpdateUserDtoToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
    UsersResponseFromJSON,
    UsersResponseToJSON,
} from '../models/index';

export interface UserControllerCreateUserRequest {
    createUserDto: CreateUserDto;
}

export interface UserControllerFindAllRequest {
    name?: string;
    email?: string;
    documentNumber?: string;
    city?: string;
    perPage?: number;
    page?: number;
}

export interface UserControllerFindByIdRequest {
    id: string;
}

export interface UserControllerRemoveRequest {
    id: string;
}

export interface UserControllerUpdateRequest {
    id: string;
    updateUserDto: UpdateUserDto;
}

export interface UserControllerUploadPhotoRequest {
    id: string;
    file?: Blob;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Create a user
     */
    async userControllerCreateUserRaw(requestParameters: UserControllerCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUserDto>> {
        if (requestParameters.createUserDto === null || requestParameters.createUserDto === undefined) {
            throw new runtime.RequiredError('createUserDto','Required parameter requestParameters.createUserDto was null or undefined when calling userControllerCreateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/v1/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(requestParameters.createUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUserDtoFromJSON(jsonValue));
    }

    /**
     * Create a user
     */
    async userControllerCreateUser(requestParameters: UserControllerCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUserDto> {
        const response = await this.userControllerCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user with filter
     */
    async userControllerFindAllRaw(requestParameters: UserControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.documentNumber !== undefined) {
            queryParameters['documentNumber'] = requestParameters.documentNumber;
        }

        if (requestParameters.city !== undefined) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/v1/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersResponseFromJSON(jsonValue));
    }

    /**
     * Get user with filter
     */
    async userControllerFindAll(requestParameters: UserControllerFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersResponse> {
        const response = await this.userControllerFindAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user with ID
     */
    async userControllerFindByIdRaw(requestParameters: UserControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerFindById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/v1/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Get user with ID
     */
    async userControllerFindById(requestParameters: UserControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.userControllerFindByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user
     */
    async userControllerRemoveRaw(requestParameters: UserControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/v1/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUserResponseFromJSON(jsonValue));
    }

    /**
     * Remove a user
     */
    async userControllerRemove(requestParameters: UserControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUserResponse> {
        const response = await this.userControllerRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update user
     */
    async userControllerUpdateRaw(requestParameters: UserControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerUpdate.');
        }

        if (requestParameters.updateUserDto === null || requestParameters.updateUserDto === undefined) {
            throw new runtime.RequiredError('updateUserDto','Required parameter requestParameters.updateUserDto was null or undefined when calling userControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/v1/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDtoToJSON(requestParameters.updateUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Update user
     */
    async userControllerUpdate(requestParameters: UserControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.userControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit photo/avatar a user
     */
    async userControllerUploadPhotoRaw(requestParameters: UserControllerUploadPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerUploadPhoto.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/user/v1/user/{id}/photo`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Submit photo/avatar a user
     */
    async userControllerUploadPhoto(requestParameters: UserControllerUploadPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerUploadPhotoRaw(requestParameters, initOverrides);
    }

}
