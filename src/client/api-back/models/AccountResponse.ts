/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AccountResponse
 */
export interface AccountResponse {
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    corporateName?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    fantasyName?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    segment?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    document?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    documentType?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    domain?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    neighborhood?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    zipCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    complement?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    status?: AccountResponseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    countryCodePhone?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    areaCodePhone?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    phoneNumber?: string;
    /**
     * 
     * @type {Date}
     * @memberof AccountResponse
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AccountResponse
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AccountResponse
     */
    deletedAt?: Date;
}


/**
 * @export
 */
export const AccountResponseStatusEnum = {
    Enabled: 'ENABLED',
    Disabled: 'DISABLED',
    WaitingApproval: 'WAITING_APPROVAL'
} as const;
export type AccountResponseStatusEnum = typeof AccountResponseStatusEnum[keyof typeof AccountResponseStatusEnum];


/**
 * Check if a given object implements the AccountResponse interface.
 */
export function instanceOfAccountResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AccountResponseFromJSON(json: any): AccountResponse {
    return AccountResponseFromJSONTyped(json, false);
}

export function AccountResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'corporateName': !exists(json, 'corporateName') ? undefined : json['corporateName'],
        'fantasyName': !exists(json, 'fantasyName') ? undefined : json['fantasyName'],
        'photo': !exists(json, 'photo') ? undefined : json['photo'],
        'segment': !exists(json, 'segment') ? undefined : json['segment'],
        'document': !exists(json, 'document') ? undefined : json['document'],
        'documentType': !exists(json, 'documentType') ? undefined : json['documentType'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'street': !exists(json, 'street') ? undefined : json['street'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'neighborhood': !exists(json, 'neighborhood') ? undefined : json['neighborhood'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'zipCode': !exists(json, 'zipCode') ? undefined : json['zipCode'],
        'complement': !exists(json, 'complement') ? undefined : json['complement'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'countryCodePhone': !exists(json, 'countryCodePhone') ? undefined : json['countryCodePhone'],
        'areaCodePhone': !exists(json, 'areaCodePhone') ? undefined : json['areaCodePhone'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'deletedAt': !exists(json, 'deletedAt') ? undefined : (new Date(json['deletedAt'])),
    };
}

export function AccountResponseToJSON(value?: AccountResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'corporateName': value.corporateName,
        'fantasyName': value.fantasyName,
        'photo': value.photo,
        'segment': value.segment,
        'document': value.document,
        'documentType': value.documentType,
        'domain': value.domain,
        'email': value.email,
        'street': value.street,
        'state': value.state,
        'city': value.city,
        'neighborhood': value.neighborhood,
        'country': value.country,
        'zipCode': value.zipCode,
        'complement': value.complement,
        'status': value.status,
        'countryCodePhone': value.countryCodePhone,
        'areaCodePhone': value.areaCodePhone,
        'phoneNumber': value.phoneNumber,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'deletedAt': value.deletedAt === undefined ? undefined : (value.deletedAt.toISOString()),
    };
}

