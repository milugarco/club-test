/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateAccountDto
 */
export interface CreateAccountDto {
    /**
     * The name of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    name: string;
    /**
     * The corporate name of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    corporateName: string;
    /**
     * The fantasy name of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    fantasyName: string;
    /**
     * The segment of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    segment: string;
    /**
     * The document number of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    document: string;
    /**
     * The type of document (CNPJ)
     * @type {string}
     * @memberof CreateAccountDto
     */
    documentType: string;
    /**
     * The domain of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    domain?: string;
    /**
     * The email of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    email: string;
    /**
     * The street address of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    street: string;
    /**
     * The state of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    state: string;
    /**
     * The city of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    city: string;
    /**
     * The neighborhood of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    neighborhood: string;
    /**
     * The country of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    country: string;
    /**
     * The ZIP code of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    zipCode: string;
    /**
     * The complement of the address
     * @type {string}
     * @memberof CreateAccountDto
     */
    complement?: string;
    /**
     * The status of the account
     * @type {string}
     * @memberof CreateAccountDto
     */
    status: CreateAccountDtoStatusEnum;
    /**
     * The country code of the phone number
     * @type {string}
     * @memberof CreateAccountDto
     */
    countryCodePhone: string;
    /**
     * The area code of the phone number
     * @type {string}
     * @memberof CreateAccountDto
     */
    areaCodePhone: string;
    /**
     * The phone number
     * @type {string}
     * @memberof CreateAccountDto
     */
    phoneNumber: string;
}


/**
 * @export
 */
export const CreateAccountDtoStatusEnum = {
    Enabled: 'ENABLED',
    Disabled: 'DISABLED',
    WaitingApproval: 'WAITING_APPROVAL'
} as const;
export type CreateAccountDtoStatusEnum = typeof CreateAccountDtoStatusEnum[keyof typeof CreateAccountDtoStatusEnum];


/**
 * Check if a given object implements the CreateAccountDto interface.
 */
export function instanceOfCreateAccountDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "corporateName" in value;
    isInstance = isInstance && "fantasyName" in value;
    isInstance = isInstance && "segment" in value;
    isInstance = isInstance && "document" in value;
    isInstance = isInstance && "documentType" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "street" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "neighborhood" in value;
    isInstance = isInstance && "country" in value;
    isInstance = isInstance && "zipCode" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "countryCodePhone" in value;
    isInstance = isInstance && "areaCodePhone" in value;
    isInstance = isInstance && "phoneNumber" in value;

    return isInstance;
}

export function CreateAccountDtoFromJSON(json: any): CreateAccountDto {
    return CreateAccountDtoFromJSONTyped(json, false);
}

export function CreateAccountDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateAccountDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'corporateName': json['corporateName'],
        'fantasyName': json['fantasyName'],
        'segment': json['segment'],
        'document': json['document'],
        'documentType': json['documentType'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'email': json['email'],
        'street': json['street'],
        'state': json['state'],
        'city': json['city'],
        'neighborhood': json['neighborhood'],
        'country': json['country'],
        'zipCode': json['zipCode'],
        'complement': !exists(json, 'complement') ? undefined : json['complement'],
        'status': json['status'],
        'countryCodePhone': json['countryCodePhone'],
        'areaCodePhone': json['areaCodePhone'],
        'phoneNumber': json['phoneNumber'],
    };
}

export function CreateAccountDtoToJSON(value?: CreateAccountDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'corporateName': value.corporateName,
        'fantasyName': value.fantasyName,
        'segment': value.segment,
        'document': value.document,
        'documentType': value.documentType,
        'domain': value.domain,
        'email': value.email,
        'street': value.street,
        'state': value.state,
        'city': value.city,
        'neighborhood': value.neighborhood,
        'country': value.country,
        'zipCode': value.zipCode,
        'complement': value.complement,
        'status': value.status,
        'countryCodePhone': value.countryCodePhone,
        'areaCodePhone': value.areaCodePhone,
        'phoneNumber': value.phoneNumber,
    };
}

