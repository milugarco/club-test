/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateEventDto
 */
export interface CreateEventDto {
    /**
     * Nome do evento
     * @type {string}
     * @memberof CreateEventDto
     */
    name: string;
    /**
     * Subtítulo do evento
     * @type {string}
     * @memberof CreateEventDto
     */
    subtitle: string;
    /**
     * Tipo do evento
     * @type {string}
     * @memberof CreateEventDto
     */
    type: string;
    /**
     * Cor primária do evento
     * @type {string}
     * @memberof CreateEventDto
     */
    colorOne: string;
    /**
     * Cor secundária do evento
     * @type {string}
     * @memberof CreateEventDto
     */
    colorTwo: string;
    /**
     * Descrição do evento
     * @type {string}
     * @memberof CreateEventDto
     */
    description: string;
    /**
     * Informação do evento
     * @type {string}
     * @memberof CreateEventDto
     */
    information: string;
    /**
     * Informações do evento enviados por email
     * @type {string}
     * @memberof CreateEventDto
     */
    informationEmail: string;
    /**
     * Vídeo do evento
     * @type {string}
     * @memberof CreateEventDto
     */
    video: string;
    /**
     * Redirecionamento depois que preencher os participantes
     * @type {string}
     * @memberof CreateEventDto
     */
    redirect: string;
    /**
     * Link para acionar conversa/grupo no whatsapp na página de obrigado
     * @type {string}
     * @memberof CreateEventDto
     */
    whatsappLink: string;
    /**
     * Link para acionar conversa/grupo no telegram na página de obrigado
     * @type {string}
     * @memberof CreateEventDto
     */
    telegramLink: string;
    /**
     * 
     * @type {string}
     * @memberof CreateEventDto
     */
    status: CreateEventDtoStatusEnum;
    /**
     * Data e hora de inicio do evento 
     * @type {Date}
     * @memberof CreateEventDto
     */
    startAt: Date;
    /**
     * Data e hora de fim do evento
     * @type {Date}
     * @memberof CreateEventDto
     */
    endAt: Date;
    /**
     * Data e hora de inicio do evento 
     * @type {Date}
     * @memberof CreateEventDto
     */
    startPublishAt: Date;
    /**
     * Data e hora de fim do evento
     * @type {Date}
     * @memberof CreateEventDto
     */
    endPublishAt: Date;
}


/**
 * @export
 */
export const CreateEventDtoStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE'
} as const;
export type CreateEventDtoStatusEnum = typeof CreateEventDtoStatusEnum[keyof typeof CreateEventDtoStatusEnum];


/**
 * Check if a given object implements the CreateEventDto interface.
 */
export function instanceOfCreateEventDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "subtitle" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "colorOne" in value;
    isInstance = isInstance && "colorTwo" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "information" in value;
    isInstance = isInstance && "informationEmail" in value;
    isInstance = isInstance && "video" in value;
    isInstance = isInstance && "redirect" in value;
    isInstance = isInstance && "whatsappLink" in value;
    isInstance = isInstance && "telegramLink" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "startAt" in value;
    isInstance = isInstance && "endAt" in value;
    isInstance = isInstance && "startPublishAt" in value;
    isInstance = isInstance && "endPublishAt" in value;

    return isInstance;
}

export function CreateEventDtoFromJSON(json: any): CreateEventDto {
    return CreateEventDtoFromJSONTyped(json, false);
}

export function CreateEventDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateEventDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'subtitle': json['subtitle'],
        'type': json['type'],
        'colorOne': json['colorOne'],
        'colorTwo': json['colorTwo'],
        'description': json['description'],
        'information': json['information'],
        'informationEmail': json['informationEmail'],
        'video': json['video'],
        'redirect': json['redirect'],
        'whatsappLink': json['whatsappLink'],
        'telegramLink': json['telegramLink'],
        'status': json['status'],
        'startAt': (new Date(json['startAt'])),
        'endAt': (new Date(json['endAt'])),
        'startPublishAt': (new Date(json['startPublishAt'])),
        'endPublishAt': (new Date(json['endPublishAt'])),
    };
}

export function CreateEventDtoToJSON(value?: CreateEventDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'subtitle': value.subtitle,
        'type': value.type,
        'colorOne': value.colorOne,
        'colorTwo': value.colorTwo,
        'description': value.description,
        'information': value.information,
        'informationEmail': value.informationEmail,
        'video': value.video,
        'redirect': value.redirect,
        'whatsappLink': value.whatsappLink,
        'telegramLink': value.telegramLink,
        'status': value.status,
        'startAt': (value.startAt.toISOString()),
        'endAt': (value.endAt.toISOString()),
        'startPublishAt': (value.startPublishAt.toISOString()),
        'endPublishAt': (value.endPublishAt.toISOString()),
    };
}

