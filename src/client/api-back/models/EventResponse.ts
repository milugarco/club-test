/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EventResponse
 */
export interface EventResponse {
    /**
     * ID do evento (UUID)
     * @type {string}
     * @memberof EventResponse
     */
    id?: string;
    /**
     * ID sequencial do evento
     * @type {number}
     * @memberof EventResponse
     */
    sequential?: number;
    /**
     * ID da conta associada ao evento (UUID)
     * @type {string}
     * @memberof EventResponse
     */
    accountId?: string;
    /**
     * ID do usuário associado ao evento (UUID)
     * @type {string}
     * @memberof EventResponse
     */
    userId?: string;
    /**
     * Nome do evento
     * @type {string}
     * @memberof EventResponse
     */
    name?: string;
    /**
     * Subtítulo do evento
     * @type {string}
     * @memberof EventResponse
     */
    subtitle?: string;
    /**
     * URI do evento
     * @type {string}
     * @memberof EventResponse
     */
    uri?: string;
    /**
     * Tipo do evento
     * @type {string}
     * @memberof EventResponse
     */
    type?: string;
    /**
     * URL da foto do evento
     * @type {string}
     * @memberof EventResponse
     */
    photo?: string;
    /**
     * Cor primária do evento
     * @type {string}
     * @memberof EventResponse
     */
    colorOne?: string;
    /**
     * Cor secundária do evento
     * @type {string}
     * @memberof EventResponse
     */
    colorTwo?: string;
    /**
     * Descrição do evento
     * @type {string}
     * @memberof EventResponse
     */
    description?: string;
    /**
     * Informação do evento
     * @type {string}
     * @memberof EventResponse
     */
    information?: string;
    /**
     * Informações do evento enviados por email
     * @type {string}
     * @memberof EventResponse
     */
    informationEmail?: string;
    /**
     * Vídeo do evento
     * @type {string}
     * @memberof EventResponse
     */
    video?: string;
    /**
     * Redirecionamento depois que preencher os participantes
     * @type {string}
     * @memberof EventResponse
     */
    redirect?: string;
    /**
     * Link para acionar conversa/grupo no whatsApp na página de obrigado
     * @type {string}
     * @memberof EventResponse
     */
    whatsappLink?: string;
    /**
     * Link para acionar conversa/grupo no telegram na página de obrigado
     * @type {string}
     * @memberof EventResponse
     */
    telegramLink?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    status?: EventResponseStatusEnum;
    /**
     * Data e hora de inicio do evento 
     * @type {Date}
     * @memberof EventResponse
     */
    startAt?: Date;
    /**
     * Data e hora de fim do evento
     * @type {Date}
     * @memberof EventResponse
     */
    endAt?: Date;
    /**
     * Data e hora de inicio do evento 
     * @type {Date}
     * @memberof EventResponse
     */
    startPublishAt?: Date;
    /**
     * Data e hora de fim do evento
     * @type {Date}
     * @memberof EventResponse
     */
    endPublishAt?: Date;
    /**
     * Data de criação do evento
     * @type {Date}
     * @memberof EventResponse
     */
    createdAt?: Date;
    /**
     * Data de atualização do evento
     * @type {Date}
     * @memberof EventResponse
     */
    updatedAt?: Date;
    /**
     * Data de exclusão do evento (se aplicável)
     * @type {Date}
     * @memberof EventResponse
     */
    deletedAt?: Date;
}


/**
 * @export
 */
export const EventResponseStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE'
} as const;
export type EventResponseStatusEnum = typeof EventResponseStatusEnum[keyof typeof EventResponseStatusEnum];


/**
 * Check if a given object implements the EventResponse interface.
 */
export function instanceOfEventResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventResponseFromJSON(json: any): EventResponse {
    return EventResponseFromJSONTyped(json, false);
}

export function EventResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'sequential': !exists(json, 'sequential') ? undefined : json['sequential'],
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'subtitle': !exists(json, 'subtitle') ? undefined : json['subtitle'],
        'uri': !exists(json, 'uri') ? undefined : json['uri'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'photo': !exists(json, 'photo') ? undefined : json['photo'],
        'colorOne': !exists(json, 'colorOne') ? undefined : json['colorOne'],
        'colorTwo': !exists(json, 'colorTwo') ? undefined : json['colorTwo'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'information': !exists(json, 'information') ? undefined : json['information'],
        'informationEmail': !exists(json, 'informationEmail') ? undefined : json['informationEmail'],
        'video': !exists(json, 'video') ? undefined : json['video'],
        'redirect': !exists(json, 'redirect') ? undefined : json['redirect'],
        'whatsappLink': !exists(json, 'whatsappLink') ? undefined : json['whatsappLink'],
        'telegramLink': !exists(json, 'telegramLink') ? undefined : json['telegramLink'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'startAt': !exists(json, 'startAt') ? undefined : (new Date(json['startAt'])),
        'endAt': !exists(json, 'endAt') ? undefined : (new Date(json['endAt'])),
        'startPublishAt': !exists(json, 'startPublishAt') ? undefined : (new Date(json['startPublishAt'])),
        'endPublishAt': !exists(json, 'endPublishAt') ? undefined : (new Date(json['endPublishAt'])),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'deletedAt': !exists(json, 'deletedAt') ? undefined : (new Date(json['deletedAt'])),
    };
}

export function EventResponseToJSON(value?: EventResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'sequential': value.sequential,
        'accountId': value.accountId,
        'userId': value.userId,
        'name': value.name,
        'subtitle': value.subtitle,
        'uri': value.uri,
        'type': value.type,
        'photo': value.photo,
        'colorOne': value.colorOne,
        'colorTwo': value.colorTwo,
        'description': value.description,
        'information': value.information,
        'informationEmail': value.informationEmail,
        'video': value.video,
        'redirect': value.redirect,
        'whatsappLink': value.whatsappLink,
        'telegramLink': value.telegramLink,
        'status': value.status,
        'startAt': value.startAt === undefined ? undefined : (value.startAt.toISOString()),
        'endAt': value.endAt === undefined ? undefined : (value.endAt.toISOString()),
        'startPublishAt': value.startPublishAt === undefined ? undefined : (value.startPublishAt.toISOString()),
        'endPublishAt': value.endPublishAt === undefined ? undefined : (value.endPublishAt.toISOString()),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'deletedAt': value.deletedAt === undefined ? undefined : (value.deletedAt.toISOString()),
    };
}

