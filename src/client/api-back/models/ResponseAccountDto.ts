/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ResponseAccountDto
 */
export interface ResponseAccountDto {
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    corporateName: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    fantasyName: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    photo: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    segment: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    document: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    documentType: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    domain: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    street: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    state: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    neighborhood: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    country: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    zipCode: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    complement: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    status: ResponseAccountDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    countryCodePhone: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    areaCodePhone: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseAccountDto
     */
    phoneNumber: string;
    /**
     * 
     * @type {Date}
     * @memberof ResponseAccountDto
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ResponseAccountDto
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ResponseAccountDto
     */
    deletedAt: Date;
}


/**
 * @export
 */
export const ResponseAccountDtoStatusEnum = {
    Enabled: 'ENABLED',
    Disabled: 'DISABLED',
    WaitingApproval: 'WAITING_APPROVAL'
} as const;
export type ResponseAccountDtoStatusEnum = typeof ResponseAccountDtoStatusEnum[keyof typeof ResponseAccountDtoStatusEnum];


/**
 * Check if a given object implements the ResponseAccountDto interface.
 */
export function instanceOfResponseAccountDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "corporateName" in value;
    isInstance = isInstance && "fantasyName" in value;
    isInstance = isInstance && "photo" in value;
    isInstance = isInstance && "segment" in value;
    isInstance = isInstance && "document" in value;
    isInstance = isInstance && "documentType" in value;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "street" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "neighborhood" in value;
    isInstance = isInstance && "country" in value;
    isInstance = isInstance && "zipCode" in value;
    isInstance = isInstance && "complement" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "countryCodePhone" in value;
    isInstance = isInstance && "areaCodePhone" in value;
    isInstance = isInstance && "phoneNumber" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "deletedAt" in value;

    return isInstance;
}

export function ResponseAccountDtoFromJSON(json: any): ResponseAccountDto {
    return ResponseAccountDtoFromJSONTyped(json, false);
}

export function ResponseAccountDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseAccountDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'corporateName': json['corporateName'],
        'fantasyName': json['fantasyName'],
        'photo': json['photo'],
        'segment': json['segment'],
        'document': json['document'],
        'documentType': json['documentType'],
        'domain': json['domain'],
        'email': json['email'],
        'street': json['street'],
        'state': json['state'],
        'city': json['city'],
        'neighborhood': json['neighborhood'],
        'country': json['country'],
        'zipCode': json['zipCode'],
        'complement': json['complement'],
        'status': json['status'],
        'countryCodePhone': json['countryCodePhone'],
        'areaCodePhone': json['areaCodePhone'],
        'phoneNumber': json['phoneNumber'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'deletedAt': (new Date(json['deletedAt'])),
    };
}

export function ResponseAccountDtoToJSON(value?: ResponseAccountDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'corporateName': value.corporateName,
        'fantasyName': value.fantasyName,
        'photo': value.photo,
        'segment': value.segment,
        'document': value.document,
        'documentType': value.documentType,
        'domain': value.domain,
        'email': value.email,
        'street': value.street,
        'state': value.state,
        'city': value.city,
        'neighborhood': value.neighborhood,
        'country': value.country,
        'zipCode': value.zipCode,
        'complement': value.complement,
        'status': value.status,
        'countryCodePhone': value.countryCodePhone,
        'areaCodePhone': value.areaCodePhone,
        'phoneNumber': value.phoneNumber,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'deletedAt': (value.deletedAt.toISOString()),
    };
}

