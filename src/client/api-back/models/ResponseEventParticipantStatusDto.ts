/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ResponseEventParticipantStatusDto
 */
export interface ResponseEventParticipantStatusDto {
    /**
     * ID do evento (UUID)
     * @type {string}
     * @memberof ResponseEventParticipantStatusDto
     */
    id: string;
    /**
     * ID do usuário associado ao evento (UUID)
     * @type {string}
     * @memberof ResponseEventParticipantStatusDto
     */
    eventParticipantId: string;
    /**
     * Event ticket guest status
     * @type {string}
     * @memberof ResponseEventParticipantStatusDto
     */
    status: ResponseEventParticipantStatusDtoStatusEnum;
    /**
     * Data e hora de inicio do evento
     * @type {Date}
     * @memberof ResponseEventParticipantStatusDto
     */
    createdAt: Date;
    /**
     * Data e hora durante a qual o evento foi atualizado
     * @type {Date}
     * @memberof ResponseEventParticipantStatusDto
     */
    updatedAt: Date;
    /**
     * Data e hora de fim do evento
     * @type {Date}
     * @memberof ResponseEventParticipantStatusDto
     */
    deletedAt: Date;
}


/**
 * @export
 */
export const ResponseEventParticipantStatusDtoStatusEnum = {
    Checkin: 'CHECKIN',
    Checkout: 'CHECKOUT',
    Pending: 'PENDING'
} as const;
export type ResponseEventParticipantStatusDtoStatusEnum = typeof ResponseEventParticipantStatusDtoStatusEnum[keyof typeof ResponseEventParticipantStatusDtoStatusEnum];


/**
 * Check if a given object implements the ResponseEventParticipantStatusDto interface.
 */
export function instanceOfResponseEventParticipantStatusDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "eventParticipantId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "deletedAt" in value;

    return isInstance;
}

export function ResponseEventParticipantStatusDtoFromJSON(json: any): ResponseEventParticipantStatusDto {
    return ResponseEventParticipantStatusDtoFromJSONTyped(json, false);
}

export function ResponseEventParticipantStatusDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseEventParticipantStatusDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'eventParticipantId': json['eventParticipantId'],
        'status': json['status'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'deletedAt': (new Date(json['deletedAt'])),
    };
}

export function ResponseEventParticipantStatusDtoToJSON(value?: ResponseEventParticipantStatusDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'eventParticipantId': value.eventParticipantId,
        'status': value.status,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'deletedAt': (value.deletedAt.toISOString()),
    };
}

