/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ResponseEventTicketDto
 */
export interface ResponseEventTicketDto {
    /**
     * ID do ticket evento (UUID)
     * @type {string}
     * @memberof ResponseEventTicketDto
     */
    id: string;
    /**
     * ID sequencial do ingresso
     * @type {number}
     * @memberof ResponseEventTicketDto
     */
    sequential: number;
    /**
     * ID da conta associada ao ticket (UUID)
     * @type {string}
     * @memberof ResponseEventTicketDto
     */
    accountId: string;
    /**
     * ID do evento associado ao ticket (UUID)
     * @type {string}
     * @memberof ResponseEventTicketDto
     */
    eventId: string;
    /**
     * Nome do ticket
     * @type {string}
     * @memberof ResponseEventTicketDto
     */
    name: string;
    /**
     * 
     * @type {object}
     * @memberof ResponseEventTicketDto
     */
    price: object;
    /**
     * 
     * @type {object}
     * @memberof ResponseEventTicketDto
     */
    priceBefore: object;
    /**
     * Status do ingresso
     * @type {string}
     * @memberof ResponseEventTicketDto
     */
    status: ResponseEventTicketDtoStatusEnum;
    /**
     * Cor do ingresso
     * @type {string}
     * @memberof ResponseEventTicketDto
     */
    color?: string;
    /**
     * Número de convidados
     * @type {number}
     * @memberof ResponseEventTicketDto
     */
    guest?: number;
    /**
     * Data de criação
     * @type {Date}
     * @memberof ResponseEventTicketDto
     */
    createdAt: Date;
    /**
     * Data de atualização
     * @type {Date}
     * @memberof ResponseEventTicketDto
     */
    updatedAt: Date;
    /**
     * Data de exclusão (se aplicável)
     * @type {Date}
     * @memberof ResponseEventTicketDto
     */
    deletedAt: Date;
}


/**
 * @export
 */
export const ResponseEventTicketDtoStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE'
} as const;
export type ResponseEventTicketDtoStatusEnum = typeof ResponseEventTicketDtoStatusEnum[keyof typeof ResponseEventTicketDtoStatusEnum];


/**
 * Check if a given object implements the ResponseEventTicketDto interface.
 */
export function instanceOfResponseEventTicketDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "sequential" in value;
    isInstance = isInstance && "accountId" in value;
    isInstance = isInstance && "eventId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "priceBefore" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "deletedAt" in value;

    return isInstance;
}

export function ResponseEventTicketDtoFromJSON(json: any): ResponseEventTicketDto {
    return ResponseEventTicketDtoFromJSONTyped(json, false);
}

export function ResponseEventTicketDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseEventTicketDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sequential': json['sequential'],
        'accountId': json['accountId'],
        'eventId': json['eventId'],
        'name': json['name'],
        'price': json['price'],
        'priceBefore': json['priceBefore'],
        'status': json['status'],
        'color': !exists(json, 'color') ? undefined : json['color'],
        'guest': !exists(json, 'guest') ? undefined : json['guest'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'deletedAt': (new Date(json['deletedAt'])),
    };
}

export function ResponseEventTicketDtoToJSON(value?: ResponseEventTicketDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'sequential': value.sequential,
        'accountId': value.accountId,
        'eventId': value.eventId,
        'name': value.name,
        'price': value.price,
        'priceBefore': value.priceBefore,
        'status': value.status,
        'color': value.color,
        'guest': value.guest,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'deletedAt': (value.deletedAt.toISOString()),
    };
}

