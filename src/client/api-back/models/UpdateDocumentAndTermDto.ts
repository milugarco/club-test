/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateDocumentAndTermDto
 */
export interface UpdateDocumentAndTermDto {
    /**
     * Novo nome do documento (opcional)
     * @type {string}
     * @memberof UpdateDocumentAndTermDto
     */
    name: string;
    /**
     * Novo caminho do arquivo (opcional)
     * @type {string}
     * @memberof UpdateDocumentAndTermDto
     */
    path: string;
    /**
     * Novo arquivo em formato binário (opcional)
     * @type {Blob}
     * @memberof UpdateDocumentAndTermDto
     */
    file: Blob;
    /**
     * Nova data de vencimento (opcional)
     * @type {Date}
     * @memberof UpdateDocumentAndTermDto
     */
    deadlineAt: Date;
    /**
     * Indica se o documento deve ser fechado automaticamente (opcional)
     * @type {boolean}
     * @memberof UpdateDocumentAndTermDto
     */
    autoClose: boolean;
    /**
     * Nova localidade do documento (opcional)
     * @type {string}
     * @memberof UpdateDocumentAndTermDto
     */
    locale: string;
    /**
     * Habilitar sequência (opcional)
     * @type {boolean}
     * @memberof UpdateDocumentAndTermDto
     */
    sequenceEnabled: boolean;
    /**
     * Novo intervalo de lembrete (opcional)
     * @type {string}
     * @memberof UpdateDocumentAndTermDto
     */
    remindInterval: string;
    /**
     * Bloquear após recusa (opcional)
     * @type {boolean}
     * @memberof UpdateDocumentAndTermDto
     */
    blockAfterRefusal: boolean;
}

/**
 * Check if a given object implements the UpdateDocumentAndTermDto interface.
 */
export function instanceOfUpdateDocumentAndTermDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "file" in value;
    isInstance = isInstance && "deadlineAt" in value;
    isInstance = isInstance && "autoClose" in value;
    isInstance = isInstance && "locale" in value;
    isInstance = isInstance && "sequenceEnabled" in value;
    isInstance = isInstance && "remindInterval" in value;
    isInstance = isInstance && "blockAfterRefusal" in value;

    return isInstance;
}

export function UpdateDocumentAndTermDtoFromJSON(json: any): UpdateDocumentAndTermDto {
    return UpdateDocumentAndTermDtoFromJSONTyped(json, false);
}

export function UpdateDocumentAndTermDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateDocumentAndTermDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'path': json['path'],
        'file': json['file'],
        'deadlineAt': (new Date(json['deadlineAt'])),
        'autoClose': json['autoClose'],
        'locale': json['locale'],
        'sequenceEnabled': json['sequenceEnabled'],
        'remindInterval': json['remindInterval'],
        'blockAfterRefusal': json['blockAfterRefusal'],
    };
}

export function UpdateDocumentAndTermDtoToJSON(value?: UpdateDocumentAndTermDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'path': value.path,
        'file': value.file,
        'deadlineAt': (value.deadlineAt.toISOString()),
        'autoClose': value.autoClose,
        'locale': value.locale,
        'sequenceEnabled': value.sequenceEnabled,
        'remindInterval': value.remindInterval,
        'blockAfterRefusal': value.blockAfterRefusal,
    };
}

