/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddressResponse } from './AddressResponse';
import {
    AddressResponseFromJSON,
    AddressResponseFromJSONTyped,
    AddressResponseToJSON,
} from './AddressResponse';

/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    status?: UserResponseStatusEnum;
    /**
     * 
     * @type {Blob}
     * @memberof UserResponse
     */
    photo?: Blob;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    countryCodePhone?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    areaCodePhone?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    phoneNumber?: string;
    /**
     * 
     * @type {Array<AddressResponse>}
     * @memberof UserResponse
     */
    addresses?: Array<AddressResponse>;
    /**
     * 
     * @type {Date}
     * @memberof UserResponse
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserResponse
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const UserResponseStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE',
    WaitingConfirmation: 'WAITING_CONFIRMATION'
} as const;
export type UserResponseStatusEnum = typeof UserResponseStatusEnum[keyof typeof UserResponseStatusEnum];


/**
 * Check if a given object implements the UserResponse interface.
 */
export function instanceOfUserResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserResponseFromJSON(json: any): UserResponse {
    return UserResponseFromJSONTyped(json, false);
}

export function UserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'photo': !exists(json, 'photo') ? undefined : json['photo'],
        'countryCodePhone': !exists(json, 'countryCodePhone') ? undefined : json['countryCodePhone'],
        'areaCodePhone': !exists(json, 'areaCodePhone') ? undefined : json['areaCodePhone'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'addresses': !exists(json, 'addresses') ? undefined : ((json['addresses'] as Array<any>).map(AddressResponseFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function UserResponseToJSON(value?: UserResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'email': value.email,
        'status': value.status,
        'photo': value.photo,
        'countryCodePhone': value.countryCodePhone,
        'areaCodePhone': value.areaCodePhone,
        'phoneNumber': value.phoneNumber,
        'addresses': value.addresses === undefined ? undefined : ((value.addresses as Array<any>).map(AddressResponseToJSON)),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

