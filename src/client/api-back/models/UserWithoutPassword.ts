/* tslint:disable */
/* eslint-disable */
/**
 * Invicta API DEV
 * Utilize essa documentação para realizar integração com o nosso sistema
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddressResponse } from './AddressResponse';
import {
    AddressResponseFromJSON,
    AddressResponseFromJSONTyped,
    AddressResponseToJSON,
} from './AddressResponse';

/**
 * 
 * @export
 * @interface UserWithoutPassword
 */
export interface UserWithoutPassword {
    /**
     * 
     * @type {string}
     * @memberof UserWithoutPassword
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutPassword
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutPassword
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutPassword
     */
    status: UserWithoutPasswordStatusEnum;
    /**
     * 
     * @type {Blob}
     * @memberof UserWithoutPassword
     */
    photo?: Blob;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutPassword
     */
    countryCodePhone: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutPassword
     */
    areaCodePhone: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithoutPassword
     */
    phoneNumber: string;
    /**
     * 
     * @type {Array<AddressResponse>}
     * @memberof UserWithoutPassword
     */
    addresses: Array<AddressResponse>;
    /**
     * 
     * @type {Date}
     * @memberof UserWithoutPassword
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserWithoutPassword
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const UserWithoutPasswordStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE',
    WaitingConfirmation: 'WAITING_CONFIRMATION'
} as const;
export type UserWithoutPasswordStatusEnum = typeof UserWithoutPasswordStatusEnum[keyof typeof UserWithoutPasswordStatusEnum];


/**
 * Check if a given object implements the UserWithoutPassword interface.
 */
export function instanceOfUserWithoutPassword(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "countryCodePhone" in value;
    isInstance = isInstance && "areaCodePhone" in value;
    isInstance = isInstance && "phoneNumber" in value;
    isInstance = isInstance && "addresses" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function UserWithoutPasswordFromJSON(json: any): UserWithoutPassword {
    return UserWithoutPasswordFromJSONTyped(json, false);
}

export function UserWithoutPasswordFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserWithoutPassword {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'email': json['email'],
        'status': json['status'],
        'photo': !exists(json, 'photo') ? undefined : json['photo'],
        'countryCodePhone': json['countryCodePhone'],
        'areaCodePhone': json['areaCodePhone'],
        'phoneNumber': json['phoneNumber'],
        'addresses': ((json['addresses'] as Array<any>).map(AddressResponseFromJSON)),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function UserWithoutPasswordToJSON(value?: UserWithoutPassword | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'email': value.email,
        'status': value.status,
        'photo': value.photo,
        'countryCodePhone': value.countryCodePhone,
        'areaCodePhone': value.areaCodePhone,
        'phoneNumber': value.phoneNumber,
        'addresses': ((value.addresses as Array<any>).map(AddressResponseToJSON)),
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

